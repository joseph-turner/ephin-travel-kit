/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

export type AllSanitySchemaTypes =
  | AssistInstructionContext
  | BlockContent
  | CallToAction
  | Geopoint
  | InfoSection
  | Link
  | Page
  | Person
  | Post
  | SanityAssetSourceData
  | SanityAssistInstruction
  | SanityAssistInstructionContext
  | SanityAssistInstructionFieldRef
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionTask
  | SanityAssistInstructionUserInput
  | SanityAssistOutputField
  | SanityAssistOutputType
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistSchemaTypeField
  | SanityAssistTaskStatus
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageCrop
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageMetadata
  | SanityImagePalette
  | SanityImagePaletteSwatch
  | Settings
  | Slug;

export type AssistInstructionContext = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'assist.instruction.context';
  _updatedAt: string;
  context?: Array<{
    _key: string;
    _type: 'block';
    children?: Array<{
      _key: string;
      _type: 'span';
      marks?: Array<string>;
      text?: string;
    }>;
    level?: number;
    listItem?: never;
    markDefs?: null;
    style?: 'normal';
  }>;
  title?: string;
};

export type BlockContent = Array<{
  _key: string;
  _type: 'block';
  children?: Array<{
    _key: string;
    _type: 'span';
    marks?: Array<string>;
    text?: string;
  }>;
  level?: number;
  listItem?: 'bullet' | 'number';
  markDefs?: Array<{
    _key: string;
    _type: 'link';
    href?: string;
    linkType?: 'href' | 'page' | 'post';
    openInNewTab?: boolean;
    page?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'page';
    };
    post?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'post';
    };
  }>;
  style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
}>;

// Source: schema.json
export type CallToAction = {
  _type: 'callToAction';
  buttonText?: string;
  heading: string;
  link?: Link;
  text?: string;
};

export type Geopoint = {
  _type: 'geopoint';
  alt?: number;
  lat?: number;
  lng?: number;
};

export type InfoSection = {
  _type: 'infoSection';
  content?: Array<{
    _key: string;
    _type: 'block';
    children?: Array<{
      _key: string;
      _type: 'span';
      marks?: Array<string>;
      text?: string;
    }>;
    level?: number;
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      _key: string;
      _type: 'link';
      href?: string;
      linkType?: 'href' | 'page' | 'post';
      openInNewTab?: boolean;
      page?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      };
      post?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'post';
      };
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
  }>;
  heading?: string;
  subheading?: string;
};

export type Link = {
  _type: 'link';
  href?: string;
  linkType?: 'href' | 'page' | 'post';
  openInNewTab?: boolean;
  page?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'page';
  };
  post?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'post';
  };
};

export type Page = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'page';
  _updatedAt: string;
  heading: string;
  name: string;
  pageBuilder?: Array<
    | (CallToAction & {
        _key: string;
      })
    | (InfoSection & {
        _key: string;
      })
  >;
  slug: Slug;
  subheading?: string;
};

export type Person = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'person';
  _updatedAt: string;
  firstName: string;
  lastName: string;
  picture: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
  };
};

export type Post = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'post';
  _updatedAt: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'person';
  };
  content?: BlockContent;
  coverImage: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
  };
  date?: string;
  excerpt?: string;
  slug: Slug;
  title: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  id?: string;
  name?: string;
  url?: string;
};

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction';
  createdById?: string;
  icon?: string;
  output?: Array<
    | (SanityAssistOutputField & {
        _key: string;
      })
    | (SanityAssistOutputType & {
        _key: string;
      })
  >;
  prompt?: SanityAssistInstructionPrompt;
  title?: string;
  userId?: string;
};

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context';
  reference: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context';
  };
};

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef';
  path?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  _key: string;
  _type: 'block';
  children?: Array<
    | (SanityAssistInstructionContext & {
        _key: string;
      })
    | (SanityAssistInstructionFieldRef & {
        _key: string;
      })
    | (SanityAssistInstructionUserInput & {
        _key: string;
      })
    | {
        _key: string;
        _type: 'span';
        marks?: Array<string>;
        text?: string;
      }
  >;
  level?: number;
  listItem?: never;
  markDefs?: null;
  style?: 'normal';
}>;

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask';
  info?: string;
  instructionKey?: string;
  path?: string;
  started?: string;
  updated?: string;
};

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput';
  description?: string;
  message: string;
};

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field';
  path?: string;
};

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type';
  type?: string;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations';
  fields?: Array<
    SanityAssistSchemaTypeField & {
      _key: string;
    }
  >;
  title?: string;
};

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field';
  instructions?: Array<
    SanityAssistInstruction & {
      _key: string;
    }
  >;
  path?: string;
};

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status';
  tasks?: Array<
    SanityAssistInstructionTask & {
      _key: string;
    }
  >;
};

export type SanityFileAsset = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'sanity.fileAsset';
  _updatedAt: string;
  altText?: string;
  assetId?: string;
  description?: string;
  extension?: string;
  label?: string;
  mimeType?: string;
  originalFilename?: string;
  path?: string;
  sha1hash?: string;
  size?: number;
  source?: SanityAssetSourceData;
  title?: string;
  uploadId?: string;
  url?: string;
};

export type SanityImageAsset = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'sanity.imageAsset';
  _updatedAt: string;
  altText?: string;
  assetId?: string;
  description?: string;
  extension?: string;
  label?: string;
  metadata?: SanityImageMetadata;
  mimeType?: string;
  originalFilename?: string;
  path?: string;
  sha1hash?: string;
  size?: number;
  source?: SanityAssetSourceData;
  title?: string;
  uploadId?: string;
  url?: string;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  bottom?: number;
  left?: number;
  right?: number;
  top?: number;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  aspectRatio?: number;
  height?: number;
  width?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  height?: number;
  width?: number;
  x?: number;
  y?: number;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  blurHash?: string;
  dimensions?: SanityImageDimensions;
  hasAlpha?: boolean;
  isOpaque?: boolean;
  location?: Geopoint;
  lqip?: string;
  palette?: SanityImagePalette;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type Settings = {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'settings';
  _updatedAt: string;
  description?: Array<{
    _key: string;
    _type: 'block';
    children?: Array<{
      _key: string;
      _type: 'span';
      marks?: Array<string>;
      text?: string;
    }>;
    level?: number;
    listItem?: never;
    markDefs?: Array<{
      _key: string;
      _type: 'link';
      href?: string;
      linkType?: 'href' | 'page' | 'post';
      openInNewTab?: boolean;
      page?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      };
      post?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'post';
      };
    }>;
    style?: 'normal';
  }>;
  ogImage?: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
    metadataBase?: string;
  };
  title: string;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};
export declare const internalGroqTypeReferenceTo: unique symbol;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string;
  author: null | {
    firstName: string;
    lastName: string;
    picture: {
      _type: 'image';
      alt?: string;
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      crop?: SanityImageCrop;
      hotspot?: SanityImageHotspot;
      media?: unknown;
    };
  };
  coverImage: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
  };
  date: string;
  excerpt: null | string;
  slug: string;
  status: 'draft' | 'published';
  title: string;
}>;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      },      },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }          }        }      },    },  }
export type GetPageQueryResult = null | {
  _id: string;
  _type: 'page';
  heading: string;
  name: string;
  pageBuilder: Array<
    | {
        _key: string;
        _type: 'callToAction';
        buttonText?: string;
        heading: string;
        link: null | {
          _type: 'link';
          href?: string;
          linkType?: 'href' | 'page' | 'post';
          openInNewTab?: boolean;
          page: null | string;
          post: null | string;
        };
        text?: string;
      }
    | {
        _key: string;
        _type: 'infoSection';
        content: Array<{
          _key: string;
          _type: 'block';
          children?: Array<{
            _key: string;
            _type: 'span';
            marks?: Array<string>;
            text?: string;
          }>;
          level?: number;
          listItem?: 'bullet' | 'number';
          markDefs: Array<{
            _key: string;
            _type: 'link';
            href?: string;
            linkType?: 'href' | 'page' | 'post';
            openInNewTab?: boolean;
            page: null | string;
            post: null | string;
          }> | null;
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal';
        }> | null;
        heading?: string;
        subheading?: string;
      }
  > | null;
  slug: Slug;
  subheading: null | string;
};
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string;
  author: null | {
    firstName: string;
    lastName: string;
    picture: {
      _type: 'image';
      alt?: string;
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      crop?: SanityImageCrop;
      hotspot?: SanityImageHotspot;
      media?: unknown;
    };
  };
  coverImage: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
  };
  date: string;
  excerpt: null | string;
  slug: string;
  status: 'draft' | 'published';
  title: string;
}>;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = null | {
  _id: string;
  author: null | {
    firstName: string;
    lastName: string;
    picture: {
      _type: 'image';
      alt?: string;
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      crop?: SanityImageCrop;
      hotspot?: SanityImageHotspot;
      media?: unknown;
    };
  };
  content: Array<{
    _key: string;
    _type: 'block';
    children?: Array<{
      _key: string;
      _type: 'span';
      marks?: Array<string>;
      text?: string;
    }>;
    level?: number;
    listItem?: 'bullet' | 'number';
    markDefs: Array<{
      _key: string;
      _type: 'link';
      href?: string;
      linkType?: 'href' | 'page' | 'post';
      openInNewTab?: boolean;
      page: null | string;
      post: null | string;
    }> | null;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
  }> | null;
  coverImage: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
  };
  date: string;
  excerpt: null | string;
  slug: string;
  status: 'draft' | 'published';
  title: string;
};
// Source: ./src/lib/sanity/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = null | {
  _createdAt: string;
  _id: string;
  _rev: string;
  _type: 'settings';
  _updatedAt: string;
  description?: Array<{
    _key: string;
    _type: 'block';
    children?: Array<{
      _key: string;
      _type: 'span';
      marks?: Array<string>;
      text?: string;
    }>;
    level?: number;
    listItem?: never;
    markDefs?: Array<{
      _key: string;
      _type: 'link';
      href?: string;
      linkType?: 'href' | 'page' | 'post';
      openInNewTab?: boolean;
      page?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      };
      post?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'post';
      };
    }>;
    style?: 'normal';
  }>;
  ogImage?: {
    _type: 'image';
    alt?: string;
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    crop?: SanityImageCrop;
    hotspot?: SanityImageHotspot;
    media?: unknown;
    metadataBase?: string;
  };
  title: string;
};
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<
  | {
      _type: 'page';
      _updatedAt: string;
      slug: string;
    }
  | {
      _type: 'post';
      _updatedAt: string;
      slug: string;
    }
>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "page" && defined(slug.current)]\n  {"slug": slug.current}\n': PagesSlugsResult;
    '\n  *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {\n    "slug": slug.current,\n    _type,\n    _updatedAt,\n  }\n': SitemapDataResult;
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': MorePostsQueryResult;
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult;
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': AllPostsQueryResult;
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': PostQueryResult;
    '*[_type == "settings"][0]': SettingsQueryResult;
    '\n  *[_type == \'page\' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    "pageBuilder": pageBuilder[]{\n      ...,\n      _type == "callToAction" => {\n        \n  link {\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n      }\n,\n      },\n      _type == "infoSection" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n          }\n        }\n      },\n    },\n  }\n': GetPageQueryResult;
  }
}
